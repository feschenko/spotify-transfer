import json
import typing
import urllib.parse

import requests


VK_AUTH_URL = (
    "https://oauth.vk.com/authorize?client_id=6146827&scope=1073737727&redirect_uri="
    "https://oauth.vk.com/blank.html&display=page&response_type=token&revoke=1"
)


class Spotify:
    def __init__(self):
        self.client_id: str = "60ab727bb2aa41789e64252994f20ffa"
        self.token: typing.Optional[str] = None
        self.playlist_id: typing.Optional[str] = None

    def make_response(self, method: str, url: str, body: typing.Optional[str] = None):
        response = requests.request(
            method,
            url=url,
            data=body,
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.token}",
            },
        )
        if response.json().get("error") is not None:
            print(method)
            print(url)
            print(body)
            raise RuntimeError(response.json()["error"]["message"])
        return response

    def generate_url(self):
        url = "https://accounts.spotify.com/authorize"
        return (
            f"{url}?client_id={self.client_id}&response_type=token&redirect_uri="
            f"http://localhost:5555/spotify/callback&scope=user-read-private%20playlist-modify-public%20playlist-"
            f"modify-private&state=34fFs29kd09"
        )

    def get_user_id(self):
        response: dict = json.loads(self.make_response("get", "https://api.spotify.com/v1/me").text)
        return response["id"]

    def generate_playlist(self):
        url = f"https://api.spotify.com/v1/users/{self.get_user_id()}/playlists"

        body = json.dumps(
            {
                "name": "Songs from Vkontakte",
                "description": f"Playlist generated by SpotiTransfer. Contains songs from Vkontakte.",
                "public": False,
            }
        )
        response = self.make_response("post", url, body)
        playlist_url = response.json()
        self.playlist_id = playlist_url["id"]
        return playlist_url["external_urls"]["spotify"]

    def add_tracks(self, tracks: list):
        url = f"https://api.spotify.com/v1/playlists/{self.playlist_id}/tracks"
        responses = []
        tracks = tracks[::-1]
        while tracks:
            body = json.dumps({"uris": tracks[:100], "position": 0})
            responses.append(self.make_response("post", url, body).json())
            tracks = tracks[100:]
        return responses

    def search_tracks(self, keywords: list):
        tracks = []
        for keyword in keywords:

            url = f'https://api.spotify.com/v1/search?q={urllib.parse.quote(keyword)}&type=track&limit=1'
            items = self.make_response("get", url).json()["tracks"]["items"]
            if not items:
                continue
            tracks.append(f"spotify:track:{items[0]['id']}")

        return tracks


class Vkontakte:
    def __init__(self):
        self.access_token: typing.Optional[str] = None
        self.uid: typing.Optional[str] = None

    @staticmethod
    def make_response(method: str, url: str):
        response = requests.request(
            method, url=url, headers={"Content-Type": "application/json"}
        )
        return response

    def get_tracks(self, offset: int):
        url = f"https://api.vk.com/method/audio.get.json?uid={self.uid}&access_token={self.access_token}&v=5.92&offset={offset}"
        page = self.make_response("get", url).text
        response = json.loads(page)["response"]
        return response

    def get_all_tracks(self):
        offset = 0
        first_response = self.get_tracks(offset)
        items: typing.List[dict] = first_response["items"]

        while first_response["count"] > len(items):
            offset += 5000
            items.extend(self.get_tracks(offset)["items"])

        return [f"{track['artist']} {track['title']}" for track in items]
